Exercises - Hash Tables

Answer the following questions by implementing the code samples and/or answering the questions in a word document. Upload all project files and word documents zipped to the exercise dropbox.

 

Read the following article on how to write a correct equals() method: article (Links to an external site.). In particular focus on pitfall #4, which highlights how an equals method should mirror a equivalence relation.

 

1. Given input {4371, 1323, 6173, 4199, 4344, 9679, 1989}, a hash table of length 10 and a hash function h(x) = x mod 10, show the resulting:

a) Separate chaining hash table
b) Hash table using linear probing
c) Hash table using quadratic probing

 

2. Show the result of rehashing the hash tables in (1). Assume the size of each hash table is doubled.

 

3. For the following class, write a custom hashcode() and equals() method. Both should be based on the fields of the class.

public class Address
{
    private int number;
    private String street;
    private String city;
    private String state;
    private int zip;

    //constructors, getters, setters, toString()...
}

Note: Your equals method should address null parameters, the case of a.equals(a), and non-Address objects (see the article above).

Note: Your hash codes should be generated directly from the fields in the Address class. If the fields in two Address objects are the same, then their hash codes should be the same. Use your creativity to find a solution!

 

4. Make an argument for why you think your hashcode() function from (4) is a strong candidate for a hash code function or a weak candidate.

 

Previous Next
